---
import "@pagefind/default-ui/css/ui.css";

export interface Props {
  readonly id?: string;
  readonly className?: string;
  readonly query?: string;
  readonly stripTrailingSlash?: string;
  readonly uiOptions?: Record<string, any>;
}

const { id, className, query, stripTrailingSlash = "false", uiOptions = {} } = Astro.props;
const bundlePath = `${import.meta.env.BASE_URL}pagefind/`;
---

<div
  id={id}
  class:list={[className, "pagefind-init"]}
  data-pagefind-ui
  data-bundle-path={bundlePath}
  data-query={query}
  data-strip-trailing-slash={stripTrailingSlash}
  data-ui-options={JSON.stringify(uiOptions)}
>
</div>
<script>
  import { PagefindUI } from "@pagefind/default-ui";

  function initPageFind() {
    const allSelector = "[data-pagefind-ui]";
    for (const el of document.querySelectorAll(`${allSelector}.pagefind-init`)) {
      const elSelector = [
        ...(el.id ? [`#${el.id}`] : []),
        ...[...el.classList.values()].map((c) => `.${c}`),
        allSelector,
      ].join("");
      const bundlePath = el.getAttribute("data-bundle-path");
      const opts = JSON.parse(el.getAttribute("data-ui-options") ?? "{}");
      const shouldStrip = el.getAttribute("data-strip-trailing-slash") === "true";
      const stripTrailingSlash = (path: string) => path.replace(/(.)\/(#.*)?$/, '$1$2');
      const formatURL = shouldStrip ? stripTrailingSlash : (path: string) => path;
      new PagefindUI({
        ...opts,
        element: elSelector,
        bundlePath,
        processResult: (result: { url: string; sub_results: Array<{ url: string }> }) => {
          result.url = formatURL(result.url);
          result.sub_results = result.sub_results.map((sub_result) => {
            sub_result.url = formatURL(sub_result.url);
            return sub_result;
          });
        },

      });
      el.classList.remove("pagefind-init");
      const query = el.getAttribute("data-query");
      if (query) {
        const input = el.querySelector<HTMLInputElement>(`input[type="text"]`);
        if (input) {
          input.value = query;
          input.dispatchEvent(new Event("input", { bubbles: true }));
        }
      }
    }
  }

  document.addEventListener("astro:page-load", initPageFind);
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initPageFind);
  } else {
    initPageFind();
  }
</script>
